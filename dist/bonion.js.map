{"version":3,"sources":["bonion.js"],"names":["module","exports","args","bon","Bonion","scan","drive","opts","index","Object","assign","depth","forks","label","InternalError","current","url","removeFork","readdir","includeStats","listing","fork","key","stat","mount","beaker","hyperdrive","name","JSON","readFile","parse","forkOf","d","info","getInfo","writable","mkdir","unmountFork","acc","lcf","peers","Promise","all","values","map","then","err","catch","listings","recent","file","r","mtime","sort","a","b","localeCompare","st","stats","reduce","bonion","metadata","Error","encodeURIComponent"],"mappings":"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","file":"bonion.js","sourceRoot":"..","sourcesContent":["//\n// bonion\n// Beaker union mounts w/o conflict resolution.\n//\n\n//\n// bonion(drive[, opts]) => [object Bonion]\n// - drive: A hyperdrive object. (e.g. beaker.hyperdrive.drive())\n// - opts: {depth: N} how deeply will the fork search for child forks?\n//\nmodule.exports = async (...args) => {\n  let bon = new Bonion(...args)\n  await bon.scan()\n  return bon\n}\n\nclass Bonion {\n  constructor (drive, opts = {}) {\n    this.drive = drive\n    this.index = null\n    Object.assign(this.opts = {depth: 1}, opts)\n    this.forks = {}\n  }\n\n  async scan(drive = null, label = null, depth = 0) {\n    if (!drive)\n      drive = this.drive\n    if (depth > 20)\n      throw new InternalError(\"the fork tree is too large, more than 20 primary hyperdrives\")\n\n    let current = this.forks[drive.url]\n    if (current) {\n      //\n      // If a primary drive contains a fork, delete our duplicate in the current\n      // drive.\n      //\n      if (depth === 0 && current.drive === this.drive && drive !== this.drive) {\n        removeFork(current.label)\n      }\n      if (current.label == null)\n        current.label = label\n      return\n    }\n    this.forks[drive.url] = current = {drive, label}\n\n    //\n    // Access all forks\n    //\n    if (depth < this.opts.depth) {\n      let listing = await drive.readdir('.forks', {includeStats: true})\n      for (let fork of listing) {\n        let key = fork.stat?.mount?.key\n        if (key) {\n          this.scan(beaker.hyperdrive.drive(key), fork.name, depth + 1)\n        }\n      }\n    }\n\n    //\n    // Access primary drive and its forks\n    //\n    try {\n      current.index = index = JSON.parse(await drive.readFile('index.json'))\n      if (drive === this.drive) {\n        this.index = index\n      }\n      if (index.forkOf) {\n        this.scan(beaker.hyperdrive.drive(index.forkOf), null, depth)\n      }\n    } catch {}\n  }\n\n  //\n  // Get this drive's info.\n  //\n  async getInfo() {\n    let d = this.forks[this.drive.url]\n    if (!d.info) {\n      d.info = await this.drive.getInfo()\n    }\n    return d.info\n  }\n\n  //\n  // Is the drive we're on the main drive?\n  //\n  isMain() {\n    return typeof(this.index) === 'object' && typeof(this.index.forkOf) === 'undefined'\n  }\n\n  //\n  // Are we an owner of any of the forks?\n  //\n  async canWrite() {\n    for (let url in this.forks) {\n      let fork = this.forks[url]\n      if (!fork.info) {\n        fork.info = await fork.drive.getInfo()\n      }\n      if (fork.info.writable) {\n        return true\n      }\n    }\n    return false\n  }\n\n  //\n  // Add a mount under .forks for the given drive.\n  //\n  async addFork(label, url) {\n    await this.drive.mkdir('/.forks')\n    await this.drive.mount(`/.forks/${label}`, url)\n  }\n\n  //\n  // Remove a mount under .forks named `label`.\n  //\n  async removeFork(label) {\n    await this.drive.unmountFork(`/.forks/${label}`)\n  }\n\n  //\n  // Get the least-common fork. (Available fork with the fewest seeds.)\n  //\n  async getLeastCommonFork() {\n    let acc = 0, lcf = null\n    for (let url in this.forks) {\n      let fork = this.forks[url]\n      if (!fork.info) {\n        fork.info = await fork.drive.getInfo()\n      }\n\n      let peers = fork.info?.peers || 0\n      if (acc == 0 || (peers != 0 && peers < acc)) {\n        acc = peers\n        lcf = fork\n      }\n    }\n    return lcf\n  }\n\n  //\n  // Build a directory listing by reading all of the attached forks.\n  //\n  async readdir(url) {\n    //\n    // Build an array of [listing, drive object] (or null\n    // if the directory can't be accessed.)\n    //\n    let listings = await Promise.all(Object.values(this.forks).\n      map(fork => fork.drive.readdir(url, {includeStats: true}).\n        then((listing, err) => listing && {listing, drive: fork.drive, label: fork.label}).\n        catch(err => null)))\n\n    //\n    // Sift out the most recent files.\n    //\n    let recent = {}\n    for (let fork of listings) {\n      if (!fork)\n        continue\n\n      for (let file of fork.listing) {\n        let r = recent[file.name]\n        if (!r || (r.stat.mtime < file.stat.mtime)) {\n          file.drive = fork.drive\n          file.label = fork.label\n          recent[file.name] = file\n        }\n      }\n    }\n\n    return Object.values(recent).sort((a, b) => a.name.localeCompare(b.name))\n  }\n\n  //\n  // Find the most recent file among the attached forks.\n  //\n  async stat(url, opts = null) {\n    opts = opts || {}\n    //\n    // Build an array of [file stat, drive object] (these values being null\n    // if the file can't be accessed.\n    //\n    let stats = await Promise.all(Object.values(this.forks).\n      map(fork => fork.drive.stat(url, opts).\n        then((stat, err) => stat && {stat, drive: fork.drive, label: fork.label}).\n        catch(err => null)))\n\n    //\n    // Find the most recent edit.\n    //\n    let st = stats.reduce((a, b) => (b?.stat?.mtime || 0) > (a?.stat?.mtime || 0) ? b : a)\n    if (st === null || st.metadata?.bonion === 'D')\n      throw new Error(\"File not found\")\n    return st\n  }\n\n  //\n  // URL for Beaker's merge page, comparing a fork to the current drive.\n  //\n  mergeUrl(drive) {\n    if (this.drive.url !== drive.url) {\n      return `beaker://diff/?base=${encodeURIComponent(drive.url)}&target=${encodeURIComponent(this.drive.url)}`\n    }\n  }\n}\n"]}