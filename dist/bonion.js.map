{"version":3,"sources":["bonion.js"],"names":["module","exports","args","bon","Bonion","scan","drive","opts","forks","depth","label","InternalError","current","url","readdir","includeStats","listing","fork","key","stat","mount","beaker","hyperdrive","name","JSON","readFile","info","parse","forkOf","mkdir","unmountFork","Promise","all","Object","values","map","then","err","catch","listings","recent","file","r","mtime","sort","a","b","localeCompare","st","stats","reduce","bonion","metadata","Error","encodeURIComponent"],"mappings":"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","file":"bonion.js","sourceRoot":"..","sourcesContent":["//\n// bonion\n// Beaker union mounts w/o conflict resolution.\n//\nmodule.exports = async (...args) => {\n  let bon = new Bonion(...args)\n  await bon.scan()\n  return bon\n}\n\nclass Bonion {\n  constructor (drive, opts = {}) {\n    this.drive = drive\n    this.opts = {}\n    this.forks = {}\n  }\n\n  async scan(drive = null, label = null, depth = 0) {\n    if (!drive)\n      drive = this.drive\n    if (depth > 20)\n      throw new InternalError(\"the fork tree is too large, more than 20 master hyperdrives\")\n\n    let current = this.forks[drive.url]\n    if (current) {\n      if (current.label == null)\n        current.label = label\n      return\n    }\n    this.forks[drive.url] = {drive, label}\n\n    //\n    // Access all forks\n    //\n    let listing = await drive.readdir('.forks', {includeStats: true})\n    for (let fork of listing) {\n      let key = fork.stat?.mount?.key\n      if (key) {\n        this.scan(beaker.hyperdrive.drive(key), fork.name, depth + 1)\n      }\n    }\n\n    //\n    // Access master drive and its forks\n    //\n    try {\n      info = JSON.parse(await drive.readFile('index.json'))\n      if (info.forkOf) {\n        this.scan(beaker.hyperdrive.drive(info.forkOf), null, depth + 1)\n      }\n    } catch {}\n  }\n\n  async addFork(label, url) {\n    await this.drive.mkdir('/.forks')\n    await this.drive.mount(`/.forks/${label}`, url)\n  }\n\n  async removeFork(label) {\n    await this.drive.unmountFork(`/.forks/${label}`)\n  }\n\n  async readdir(url) {\n    //\n    // Build an array of [listing, drive object] (or null\n    // if the directory can't be accessed.)\n    //\n    let listings = await Promise.all(Object.values(this.forks).\n      map(fork => fork.drive.readdir(url, {includeStats: true}).\n        then((listing, err) => listing && {listing, drive: fork.drive, label: fork.label}).\n        catch(err => null)))\n\n    //\n    // Sift out the most recent files.\n    //\n    let recent = {}\n    for (let fork of listings) {\n      if (!fork)\n        continue\n\n      for (let file of fork.listing) {\n        let r = recent[file.name]\n        if (!r || (r.stat.mtime < file.stat.mtime)) {\n          file.drive = fork.drive\n          file.label = fork.label\n          recent[file.name] = file\n        }\n      }\n    }\n\n    return Object.values(recent).sort((a, b) => a.name.localeCompare(b.name))\n  }\n\n  async stat(url, opts = null) {\n    opts = opts || {}\n    //\n    // Build an array of [file stat, drive object] (these values being null\n    // if the file can't be accessed.\n    //\n    let stats = await Promise.all(Object.values(this.forks).\n      map(fork => fork.drive.stat(url, opts).\n        then((stat, err) => stat && {stat, drive: fork.drive, label: fork.label}).\n        catch(err => null)))\n\n    //\n    // Find the most recent edit.\n    //\n    let st = stats.reduce((a, b) => (b?.stat?.mtime || 0) > (a?.stat?.mtime || 0) ? b : a)\n    if (st === null || st.metadata?.bonion === 'D')\n      throw new Error(\"File not found\")\n    return st\n  }\n\n  mergeUrl(drive) {\n    if (this.drive.url !== drive.url) {\n      return `beaker://diff/?base=${encodeURIComponent(drive.url)}&target=${encodeURIComponent(this.drive.url)}`\n    }\n  }\n}\n"]}